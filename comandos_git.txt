____________________________________________INICIANDO GIT POR PRIMERA VEZ_______________________________________________

git init                   -> se ejecuta el inicio de git para crar el repositorio en la carpeta donde se ejecuto


git status                 -> verifica el estado del proyecto en la rama actual
git add <archivo/carpeta>  -> agrega al staged/RAM los archivos o directorios que seran trackeados por git
git add .                  -> agrega todos los archivos y carpetas a staged/RAM

git rm --cached <archivo>  -> elimina el archivo almacenado en la momoria RAM/staged  

git commit -m "comentario" -> envia los archivo añadidos a la base de datos de git
                            "En caso de omitir el comentario git dispara el editor vim para agregar un comentario"
	                    "tienes que hacer el comentario y guardas con (Esc + Shif + z + z) o ( (Ctrl + X) + Y)"

git commit -am "comentario"-> agrega y envia los cambios a un archivo que previamente ha sido trackeado por git

git log <archivo>          -> muestra la historia de cambios del archivo
git log                    -> muestra la historia de cambios de todo el proyecto

                            "si es la primera vez interactuando con git toca configurarlo"


____________________________________________________CONFIGURANDO GIT ___________________________________________________

git config                      -> aqui podras enconctrar todas las configuraciones de git
git config --list               -> podras ver la configuracion por defecto y las configuraciones faltantes en git
git config --list --show-origin -> para ver donde estan guardadas las configuraciones de git (solo para casos avanzados)

git config --global user.name "nombre"  -> hace un cambio global al nombre del usuario
git config --global user.email "correo" -> hace un cambio al correo del usuario



________________________________________________ANALIZANDO CAMBIOS EN GIT ______________________________________________

git show <archivo>                       -> muestra una comparacion de los cambios realizados al archivo
git log                                  -> muestra la historia de cambios del proyecto y los id de los commits
git log --stat                           -> muestra los cambios especificos de los archivos

git diff <id del commit> <id del commit> -> muestra las diferencias entre los cambios



_____________________________________________________EL Ctrl Z DE GIT___________________________________________________

git reset <id del commit> --hard -> todo vuelve al estado anterior del <id del commit>
git reset <id del commit> --soft -> vuelve al estado anterior del <id del commit> pero mantiene lo que hay en staged/RAM


___________________________________________COMO VOLVER UNA VERSION ANTERIOR EN GIT______________________________________

git checkout <id del commit> <archivo>  -> regresas la version del <id del commmit> del <archivo>
git checkout master <archivos>          -> regresas a la version actual del archivo




________________________________________________________RAMAS EN GIT____________________________________________________

git branch <nombre de la rama>   -> creas una nueva rama de trabajo
git branch                       -> muestra las ramas creadas y señala la rama en la que te encuentras

git checkout <nombre de la rama> -> te mueves a la rama de trabajo
git checkout master              -> regresas a la rama principal

git merge <rama a fusionar>      -> fusiona la rama actual con la rama que se le indique



_______________________________________________INTEGRANDO Git CON GitHub (HTML)_________________________________________

git remote add <origin> <URL>    -> Agrega un origen remoto de nuestros archivos

git remote                       -> Muestra nuestros origenes remotos
git remote -v                    -> Muestra nuestros origenes remotos con las direcciones del repositorio

git pull <origin> <master>                             -> Trae los cambios de GitHub al repositorio de Git
git pull <origin> <master> --allow-unrelated-histories -> trae los cambios de GitHub y fuerza la intergracion con Git

git push <origin> <master>       -> Empuja los cambios de Git al repositorio en Github



__________________________________CREACION DE UNA LLAVE PUBLICA Y UNA LLAVE PRIVADA (SSH)_______________________________


ssh-keygen -t rsa -b 4096 -C "tu@email.com" -> Crea la llave "-t" indica el algoritmo (rsa) "-b" la complejidad (4096)

Linux y Windows:

eval $(ssh-agent -s)                        -> Enciende el servidor de llaves
ssh-add <ruta de la llave id_rsa privada>   -> Agrega la llave al servidor

Mac:

eval "$(ssh-agent -s)"                      -> Enciende el servidor de llaves
ssh-add -K <ruta de la llave id_rsa privada>-> Agrega la llave al servidor 
	    				       "si no existe el archivo config se crea de la siguiente manera"

Host *
	AddKeysToAgent yes
	UseKeychain yes
	IdentityFile <ruta de la llave id_rsa privada>



________________________________________________INTEGRANDO Git CON GitHub (SSH)_________________________________________

git remote add <origin> <SSH>    -> Agrega un origen remoto de nuestros archivos
git remote set-url <origin> <SSH>-> Cambia la direccion del origen remoto

git remote                       -> Muestra nuestros origenes remotos
git remote -v                    -> Muestra nuestros origenes remotos con las direcciones del repositorio

git pull <origin> <master>                             -> Trae los cambios de GitHub al repositorio de Git
git pull <origin> <master> --allow-unrelated-histories -> trae los cambios de GitHub y fuerza la intergracion con Git

git push <origin> <master>       -> Empuja los cambios de Git al repositorio en Github